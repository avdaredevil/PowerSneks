param()
# =======================================START=OF=COMPILER==========================================================|
#    The Following Code was added by AP-Compiler 1.6 (APC: 1.2) To Make this program independent of AP-Core Engine
#    GitHub: https://github.com/avdaredevil/AP-Compiler
# ==================================================================================================================|
$Script:PSHell=$(if($PSHell){$PSHell}elseif($PSScriptRoot){$PSScriptRoot}else{"."});
$Script:AP_Console = @{version=[version]'1.2'; isShim = $true}
function B64 {param([Parameter(ValueFromPipeline=$true)][String]$Text, [ValidateSet("UTF8","Unicode")][String]$Encoding = "UTF8")     [System.Text.Encoding]::$Encoding.GetString([System.Convert]::FromBase64String($Text))}
# This syntax is to prevent AV's from misclassifying this as anything but innocuous
& (Get-Alias iex) (B64 "")
# ========================================END=OF=COMPILER===========================================================|
# ap-compile: Write-AP, Get-Escape, JS-OR, AP-ConvertPath, KeyTranslate, Test-Administrator, KeyPressed, Place-BufferedContent, Get-Path, Align-Text, KeyPressedCode, AP-Require, Strip-ColorCodes, Get-Where, Set-Path

#= MAIN-GAME ==================================================================================|
function Get-PlayerSpawn([Game]$Game) {
    if (!$Game) {throw "Game object not found, check if AV is blocking the script"}
    $c = @(-1, -1)
    $tmout = 100
    $H, $W = $(gv win | % Value)
    while (1) {
        $x,$y = $c = $Game.getEmptyCoord()
        if (--$tmout -gt 0 -and $x -lt (.1*$W) -or $x -gt (.9*$W) -or $y -lt (.45*$H) -or $y -gt (.95*$H)) {continue}
        break
    }
    return $c
}
function Start-Game([ScriptBlock]$CustomHook = {}) {
    [Console]::CursorVisible = $False
    cls
    $Map = $null
    if (($MapFile -ne '/*\') -and (Test-path -type leaf $MapFile)) {
        $Map = $MapFile
    } elseif ($LoadDefaultSave) {
        $Map = $SaveFile
    }
    $Game = [Game]::New($Map, $Trail)
    if (!$Game.Players -and ($Snakes -or $Bots)) {
        if ($Snakes) {
            1..$Snakes | % {
                $c = Get-PlayerSpawn $Game
                $Game.attachPlayer([Snake]::new($c, $Game))
            }
        }
        if ($Bots) {
            1..$Bots | % {
                $c = Get-PlayerSpawn $Game
                $Game.attachPlayer([SnakeBot]::new($c, $Game))
            }
        }
    }
    $Game.Debug = gv Debug | % Value
    $Game.Run({
        param($Tick)
        try {
            if (!($Tick % 500)) {
                $c = $Game.getEmptyCoord()
                # Eventually a boss maybe?
            } elseif (!($Tick % 100)) {
                $c = $Game.getEmptyCoord()
                $Game.attachLiveObject([GoldenSnitch]::New($c, $Game))
            }
            $CustomHook.Invoke($Game, $Tick)
        } catch {
            Write-Host Error ($_ | Out-String)
        }
    }.GetNewClosure())
}
function Write-ToPos ([string]$str, [int]$x = 0, [int]$y = 0, [ConsoleColor]$bgc = [console]::BackgroundColor, [ConsoleColor]$fgc = [Console]::ForegroundColor) {
    if ($x -lt 0 -or $y -lt 0 -or $x -gt [Console]::WindowWidth -or $y -gt [Console]::WindowHeight) {return}
    
    try {
        $Host.UI.RawUI.SetBufferContents(
            $Lib.Rect::new($x, ($WTY+$y), $x, $y),
            $Lib.Cell::new(
                $str[0],
                $fgc,
                $bgc,
                $Lib.CellType::Complete))
    } catch {}
}
function Modify-Coord ([int]$x, [int]$y, [Direction]$bgc, [int]$Scale = 1) {
    switch ([int]$bgc) {
        0 {$x-=$Scale}
        1 {$y-=$Scale}
        2 {$x+=$Scale}
        3 {$y+=$Scale}
    }
    return @($x,$y)
}
function Place-BufferedContent($Text, $x, $y, [ConsoleColor]$ForegroundColor=[Console]::ForegroundColor, [ConsoleColor]$BackgroundColor=[Console]::BackgroundColor) {
    $crd = [Management.Automation.Host.Coordinates]::new($x,$y)
    $b = $Host.UI.RawUI
    $arr = $b.NewBufferCellArray(@($Text), $ForegroundColor, $BackgroundColor)
    $x = [Console]::BufferWidth-1-$Text.length
    $b.SetBufferContents($crd, $arr)
}

#= GAME ENTITIES ==============================================================================|
Get-ChildItem $PSScriptRoot/entities | % {
    . $_.FullName
}